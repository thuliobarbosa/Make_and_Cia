package br.com.libertas.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import br.com.libertas.dto.ContaPagar;

public class ContaPagarDao {
	
	/** @author Thulio Barbosa de Paula Martins
	 *  @date 15-11-2020
	 *  @Descripition Responsavel por realizar a inserção de uma conta a pagar
	 *  @param ContaPagar cp
	 *  @return JsonObejct resposta
	 */ 
	public JsonObject inserir(ContaPagar cp) {
		
		boolean cond = true;
		String saida = "Sem retorno!";
		JsonObject resposta = new JsonObject();
		Conexao con = new Conexao();
		
		try {
			String sql = "INSERT INTO cad_contaPagar (descricao, valor, data, status, parcela) VALUES"
					+ "(?,?,?,?,?)";
			
			PreparedStatement prep = con.getConexao().prepareStatement(sql);
			prep.setString(1, cp.getDescricao());
			prep.setDouble(2, cp.getValor());
			prep.setDate(3, cp.getData());
			prep.setString(4, cp.getStatus());
			prep.setInt(5, cp.getParcela());
			prep.execute();
			
			saida = "Conta a pagar cadastrada com sucesso!";
			
		} catch (Exception e) {
			e.printStackTrace();
			saida = "Não foi possivel cadastrar a conta a pagar, motivo : " + e.toString();
			cond = false;
		}
		con.desconecta();
		
		resposta.addProperty("Condição", cond);
		resposta.addProperty("Mensagem" , saida);
		
		return resposta;
		
	}
	
	/** @author Thulio Barbosa de Paula Martins
	 *  @date 15-11-2020
	 *  @Descripition Responsavel por realizar a exclusão de uma conta a pagar
	 *  @param int id
	 *  @return JsonObject resposta
	 */
	public JsonObject excluir(int id) {
		
		boolean cond = true;
		String saida = "Sem retorno!";
		JsonObject resposta = new JsonObject();
		Conexao con = new Conexao();
		
		try {
			
			String sql = "DELETE FROM cad_contaPagar WHERE id = ?";
			PreparedStatement prep = con.getConexao().prepareStatement(sql);
			prep.setInt(1, id);
			prep.execute();
			
			saida = "Conta a pagar excluída com sucesso!";
			
		} catch (Exception e) {
			e.printStackTrace();
			saida = "Não foi possível exlcuir a conta a pagar, motivo: " + e.toString();
			cond = false;
		}
		con.desconecta();
		
		resposta.addProperty("Condição", cond);
		resposta.addProperty("Mensagem", saida);
		
		return resposta;
	}
	
	/** @author Thulio Barbosa de Paula Martins
	 *  @date 15-11-2020
	 *  @Descripition Responsavel por realizar a alteração de uma conta a pagar
	 *  @param ContaPagar cp
	 *  @return JsonObject resposta
	 */
	public JsonObject alterar(ContaPagar cp) {
		
		boolean cond = true;
		String mensagem = "Sem retorno!";
		JsonObject resposta = new JsonObject();
		Conexao con = new Conexao();
		
		try {
			
			String sql = "UPDATE cad_contaPagar SET descricao=?, valor=?, data=?, status=?, parcela=? WHERE id=?";
			
			PreparedStatement prep = con.getConexao().prepareStatement(sql);
			prep.setString(1, cp.getDescricao());
			prep.setDouble(2, cp.getValor());
			prep.setDate(3, cp.getData());
			prep.setString(4, cp.getStatus());
			prep.setInt(5, cp.getParcela());
			prep.setInt(6, cp.getId());
			prep.execute();
			
			mensagem = "Conta a pagar atualizada com sucesso!";
			
		} catch (Exception e) {
			e.printStackTrace();
			mensagem = "Nao foi possível atualizar a conta a pagar, motivo: "+ e.toString();
			cond = false;
		}
		
		con.desconecta();
		
		resposta.addProperty("Condição", cond);
		resposta.addProperty("Mensagem" , mensagem);
		
		return resposta;
	}
	
	/** @author Thulio Barbosa de Paula Martins
	 *  @date 15-11-2020
	 *  @Descripition Responsavel por realizar a consulta de um Fornecedor
	 *  @param int id
	 *  @return ContaPagar cp
	 */
	public Fornecedor consultar(int id) {
		
		Fornecedor f = new Fornecedor();
		Conexao con = new Conexao();
		
		System.out.print("Parametro => " + id);
		
		try {
			
			String sql = "SELECT * FROM cad_fornecedor WHERE id = " + id;
			
			Statement sta = con.getConexao().createStatement();
			ResultSet res = sta.executeQuery(sql);
			
			if (res.next()) {
				f.setNome(res.getString("nome"));
				f.setCnpj(res.getString("cnpj"));
				f.setEndereco(res.getString("endereco"));
				f.setCidade(res.getString("cidade"));
				f.setTelefone(res.getString("telefone"));
				f.setId(res.getInt("id"));
			}
			
			res.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		con.desconecta();
		
		return f;
	}
	
	/** @author Thulio Barbosa de Paula Martins
	 *  @date 15-11-2020
	 *  @Descripition Responsavel por listar todas categorias
	 *  @param int id
	 *  @return LinkedList listaFornecedor
	 */
	public LinkedList<Fornecedor> listar(){
		
		Conexao con = new Conexao();
		LinkedList<Fornecedor> listaFornecedor = new LinkedList<Fornecedor>();
		
		try {
			
			String sql = "SELECT * FROM cad_fornecedor";
			
			Statement sta = con.getConexao().createStatement();
			ResultSet res = sta.executeQuery(sql);
			
			while (res.next()) {
				Fornecedor f = new Fornecedor();
				f.setNome(res.getString("nome"));
				f.setCnpj(res.getString("cnpj"));
				f.setEndereco(res.getString("endereco"));
				f.setCidade(res.getString("cidade"));
				f.setTelefone(res.getString("telefone"));
				f.setId(res.getInt("id"));
				listaFornecedor.add(f);
			}
			res.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		con.desconecta();
		
		return listaFornecedor;
	}

}
